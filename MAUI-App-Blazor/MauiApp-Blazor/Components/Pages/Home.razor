@page "/"
@using Farabeh.MyBuilding.Core.Domain.Assets.Contracts
@using MauiApp_Blazor.Database

@inject IJSRuntime JSRuntime;

@{
    if (firstPage)
    {
        <article id="first-page" class="first-page">
            <div class="px-4 inner-first-page">
                <div class="row">
                    <NavLink href="manager" class="col-6 bg-info text-center border border-info rounded-2 text-decoration-none" style="height: 175px">
                        <div class="mt-4 mb-2">
                            <img src="images/Manager.svg" width="100" />
                        </div>
                        <div class="text-black">مدیر ساختمان</div>
                    </NavLink>

                    <NavLink href="weather" class="col-6 bg-warning text-center border border-warning rounded-2 text-decoration-none" style="height: 175px">
                        <div class="mt-4 mb-2">
                            <img src="images/Customer.svg" width="100" />
                        </div>
                        <div class="text-black">ساکنین واحدها</div>
                    </NavLink>
                </div>
            </div>
        </article>
    }
    else
    {
        <article id="content" class="content">
            <div class="px-4" style="overflow-y:scroll; height: 100%">
                <div>
                    <h1>سلام, دنیا!</h1>

                    @* <div>
            Welcome to your new app.
            </div>

            <h1>1</h1>

            <div>
            Welcome to your new app.
            </div>

            @{
            if (Products == null)
            {
            <h1>loading ...</h1>
            }
            else
            {
            foreach (var product in Products)
            {
            <h1>@product.Name - @product.Id</h1>

            <div>
            @product.Price
            </div>
            }
            }
            }

            <h1>3</h1>

            <div>
            Welcome to your new app.
            </div>*@
                </div>
            </div>
        </article>

        <div class="add mx-4">
            <img src="images/plus.svg" />
        </div>

        <div id="footer" class="footer">
            <div class="row">
                <div class="col-3">1</div>
                <div class="col-3">2</div>
                <div class="col-3">3</div>
                <div class="col-3">4</div>
            </div>
        </div>
    }
}

@code {
    private bool firstPage = true;
    // private List<Building> Products = null;

    [Inject]
    public IAssetClient Client { get; set; }

    protected async override Task OnInitializedAsync()
    {
        // var db = new SqliteDbContext();
        // Products = await db.GetAll();

        var result = await Client.GetAssetById("123456");
        if (result.IsSuccess)
        {
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // var menuHeight = "";
            var headerHeight = "";
            var footerHeight = "";

            var Width = DeviceDisplay.MainDisplayInfo.Width / DeviceDisplay.MainDisplayInfo.Density;
            var height = DeviceDisplay.MainDisplayInfo.Height / DeviceDisplay.MainDisplayInfo.Density;

            if (firstPage)
            {
                // var dimHeader = await JSRuntime.InvokeAsync<string>("getDimensions", "header");
                // if (dimHeader != null)
                // {
                //     dynamic d = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(dimHeader);
                //     headerHeight = d.height;
                // }

                // if (height != 0 && headerHeight != null)
                // {
                //     var contentHeight = (Convert.ToInt64(height) - (Convert.ToInt64(headerHeight) + 60)).ToString();
                //     await JSRuntime.InvokeAsync<string>("setDimensions", "first-page", contentHeight);
                // }
            }
            else
            {
                // var dimMenu = await JSRuntime.InvokeAsync<string>("getDimensions", "menu");
                // if (dimMenu != null)
                // {
                //     dynamic d = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(dimMenu);
                //     menuHeight = d.height;
                // }

                var dimHeader = await JSRuntime.InvokeAsync<string>("getDimensions", "header");
                if (dimHeader != null)
                {
                    dynamic d = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(dimHeader);
                    headerHeight = d.height;
                }

                var dimFooter = await JSRuntime.InvokeAsync<string>("getDimensions", "footer");
                if (dimFooter != null)
                {
                    dynamic d = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(dimFooter);
                    footerHeight = d.height;
                }

                if (height != 0 && headerHeight != null && footerHeight != null)
                {
                    var contentHeight = (Convert.ToInt64(height) - (Convert.ToInt64(headerHeight) + Convert.ToInt64(footerHeight) + 120)).ToString();
                    await JSRuntime.InvokeAsync<string>("setDimensions", "content", contentHeight);
                }
            }
        }
    }

    private async Task<bool> ChangePage(object objectToDisplay)
    {
        StateHasChanged();

        return false;
    }
}
